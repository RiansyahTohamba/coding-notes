CONTROLLED EXPERIMENT
summary

0. intro , posisi controlled experiments dalam ABC Framework (0 - 03:15)
1. typical examples (03:15 - 09:12)
	a. software subject
	b. Human Subject : method tertentu pada process SE : requirement gathering, refactoring
	human and software subject
2. controlled experiments and theories (09:12 - 10:22)
3. controlled experiments : process (10:22 - 12:57)
4. controlled experiments : elements (12:57 - 18:58)
	a. creativity in creating hypothesis
	b. testing : this part is mostly automated, but need to understand it
	c. hypothesis proven	
5. controlled experiments : controlled variables (18:58 - 27:55)
6. definition of hypothesis (27:55 - 30:52)
7. definition of variables (independent, dependent, controlled ) and treatments (30:52 - 34:30)
8. first example : software  (34:30 - 40:40)
9. second example : software and human (40:40 - 48:24)
10. advantage and disadvantage (48:24 - 54:28)

selanjutnya : hypothesis testing
===================================

oh hello to everyone 

today we start with a some more harder material with respect to the other lectures which were giving an overview of "empirical studies in software engineering"

now we start with one of the strategies that that we listed last time 
and these "controlled experiments" 

here I put a couple of references that you can take 
to extend some to the material that you will find 
we will find in these slides 
we will go through through this topic in this lecture 

and in a key in the next lecture in which i will show you guidelines on "how to select empirical tests for controlled experiments?"

so last time to take a bit from last lecture we will show the different types of research strategies 
and we saw that experiments laboratory experiments 
controlled experiments 
in vitro experiment as a paradigm are typically strategies that require are contrived settings 
so an artificial settings , okay?? 

==============
Experiment dilakukan di lab, actually SW ENG Lab dapat hanya berupa only room. Pada ruangan tersebut kita bisa eliminasi confounding factors.
==============
not the natural one a setting in which I am for example in the lab, (of course) ! 
(lab) for software engineering experiment it doesn't necessarily need to be like a scientific lab but at least room or a space in which you can you can eliminate some "confounding factors" or some "confounding variables" as as we will see in the next slide. 

so the goal when do you use a controlled experiment 
when your goal is to "measure the behavior in a precise way" 
the behavior of whom may be very behavior of actors 
actors can be as we as we said last time 
both "software engineers" but also "tools" , okay? 
precision is the core and it is also important to highlight that these behavior needs to be related to quite clearly "identifiable variables".

FIELD STUDY VS Experiment
--------
so if the variables that you want to measure are "too complex" 
and are affected by "several factors in practice" 
(then) it is 'very unlikely' that you will use an experiment. 
it's more appropriate to use a 'field study' , okay? 

when you can isolate your variable and we will see some examples 
it is appropriate to use an experiment as a research strategy , okay? control that we speak about "controlled experiments" 
but you will find also synonyms in the literature 
so laboratory experiments but also simply experiment. 
------------
TERMINOLOGI : laboratory experiments == controlled experiments
------------------
okay? but they refer mostly to the same thing we will discuss next time a little bit about the concept of quasi experiments but we are speaking about the same practical cases , okay?? 
================
Typical examples
================
with software subject
with human subject
---
let's start with some practical typical examples :
that can give us an overview of what we will be speaking about in this lecture. 
experiments they can be in software engineering at least like because experiments, (of course), we study them in this specific 
in this specific field they can be with soft subject or with human subjects. 
---
so for example experiment with only software subject ARE like the one that is that is described here. 
---
software subject : TOOL A VS TOOL B

I have two tools 

so one tool a and one tool B 
and they do automatic testing , okay? ?
they're push-button tools for testing 

so I have some code (then) I press a button 
and the to test my code 
and I want to compare them in terms of different aspects 
for example 
how many bugs do they find ? and 
how fast they are in finding this bugs? etc.

so I need to compare two tools 

in this case since they are push button tools (fully automatic tools) then I do not need to involve people , okay?? 
so it's an experiment with only software subjects 
when I have to involves human subjects 
it is the case for exam on the human subject 

so no software subjects involved, but still in the field of software engineering there is the second example. 
-----------------------------------
pembahasan dibawah mengenai sampling people
pada riset seperti apa yg perlu dibedakan novice atau expert ?
atau random saja dan bisa dikatakan sampling kita ini adalah typical population of developer
---------------
CONTOH 
FINDING BUG METHOD FOR HUMAN SUBJECT : EXPERT VS NOVICES ?
cara mengklasifikasi sample, yakni human, based on 'their experience' , i.e expert vs novice.
contoh efek method checklist terhadap bug finding
independent variable :
dependent variable : 

-----------------------------------
intermezo: 
so research about refactoring use HUMAN SUBJECT, yakni Method refactoring terhadap kemampuannya untuk di maintain oleh the next Maintainers ?
Maintainer akan kesulitan dengan high coupling ? 
ya beberapa riset menunjukkan change-then-fault pronennes dipengaruhi oleh dispersion coupling ?
How to consider the experience of programmer , john outsterhart tidak punya masalah dengan high LOC of Class atau high LOC of Method ?
=============
so I have a certain method that is a manual strategy for finding bugs in the code. 

so I manually reviewed the code and I search for bugs according to a certain checklist, 
for example  
1. a new checklist for finding bugs were 
2. also other defects in the code my question can be. 

how effective is this guideline, this checklist, for experts ?
and how effective is it for novices ok? 

what is the differences between novices and experts in adopting this type of method ? 

so here I'm involving human subjects. 

I'm studying constructs related to the subjects 
because the level of expertise here that are studying actually 
and I want to see 
how the the certain strategy (for finding bug)
how the behavior of the people varries 
when using these specific strategies ok? 

specific strategy varies in terms of "effectiveness" 
so this "effectiveness" can be again defined in different ways 
so how many bugs do they find out 
how quick are them in finding bugs 
so but the idea here is that while in the first example you have 

only software subjects in here you have only human subjects and strategy ok? but most of the time you mix it ! 
(of course) you have both softer subjects and human subjects because automatic tools rarely exists in software engineering.

(seringkali, ide riset SE adalah mengkombinasikan tools + human)

so it is more likely that you have an interactive tool for testing and you want to see if it is more appropriate for novices or experts , okay? 

like the example before in which you have a method but in case you have a software too , okay?
but you can have also other more complex cases. 

so you have two tools :
both interactive and you want to compare them. 

so in this case you don't care about the level of experience. 

so now this is an expert 
you just want to compare them but you need to involve people 
because they are interactive tools for testing ok ?
and in this case how will you select these people hey 
I will select them if I assume that these tools are somewhat independent on the expertise of the people

I need to involve people with "various expertise"
and within "a balanced and general way" 

so that my "sample of people" is somehow representative of the typical people, "typical population of developers "

so that somehow I "eliminate" (OR) I "get rid" of the "expertise" aspects 
in this specific experiment 
and I just compared to lay and tool be like they were automated - ok ?

although they are interactive ok? 
this is the general idea for this type of experiments 

we will see more in in detail 

this type of little tricky aspects when we will see more detailed examples you can have also other other cases. 

again you have interactive tools 
and in this case you want to see 
"which one is more appropriate for novices ? " and 
"which one is more appropriate for experts ?" , okay? 

so 'expertise' now becomes 'again' a relevant "aspect to consider" 
or you can even compare tools and approaches 
so for example in a company I may use a typical code review strategy with a 'certain checklist' 

and I want to introduce a certain tool a ok? 

I am comparing a tool and a method 
and I want to see which one is better 

again this is an experiment that involves software subjects 
so the tool but involve also involves human subject 

because I need to recruit people that use the actually use 
these approaches ok (of course) things become tricky 
if the tool is a fully automatic 
and the method (of course) requires some 'manual intervention' 

so you need to 'really take care' 
you need to 'carefully consider' the variable that you are evaluating in this case 
---
harus lebih hati-hati menetapkan variable pada human subject
karena bisa saja bukan karena method XYZnya yang menyelesaikan suatu masalah tapi karena human itu sendiri yg punya kemampuan lebih (pengalaman, etc) 
lain halnya jika kita 'hanya' menguji fully automated tools yang tak perlu intervensi manual manusia, faktor manusia tidak menjadi hal berarti.
---

====================
Controlled experiments and theories
====================
controlled experiments menggunakan deductive approaches bukan inductive
deductive 
karena method ini sudah punya basis theories, entah dari literature atau study exploratory, jadi teori nya di formalkan sehingga bisa ditest dengan NHST (null hypothesis significant testing)
-----------------
but let's these are examples 
and now let's see how this experiments are placed in our diagram of theory building in software engineering and in in science in general. 

basically controlled experiments are positioned our deductive approaches 

so are positioned in the top-down direction of this diagram 
so they are not using induction but they're using deduction 
---------------------------

I have a certain theory ok? 
a certain theory taken from the literature 
or 
observed from previous more exploratory study 
and I formalized some hypothesis from this theory 
and then what I want to do is to "test the hypotheses"

so in this lecture you will see how to approach this all deductive process ok? 
that we saw last time in the context of theory building with 
induction
abduction and 
deduction, ok? 

----------------------------------------
controlled experiments : process 
----------------------------------
what is the process for controlled experiments ?
and at the end of these two lectures, I will show you more in detail what they all these blocks mean ? 
(diagram, biru dan hijau yang ada di slide) 

but the idea is that taken from the previous slide in which 
you start from some theory and you go down towards the observation of reality 

here the situation is similar 

so you start from the theory 
(then) you build some research question (in the way that I explained last time)
(then) you create hypotheses in variable definitions 

1. so you operationalize the constructs of the theory through variables 
as you remember the terminology that we used to 
2. and we do our research design : that means also 
selecting the type of 
'how many groups of people do I want to involve' 
and 'how to map these variables into actual data' that I can gather , okay? 

and in the research design 
1. I also define the measures for the different variables 
2. then I recruit the participants 
3. and I select test artifacts for my experiments 
4. (then) collect data analyze the data it is the execution of this paramount 
5. and then I discussed several validity threats that are all related to different layers to different levels of my study 
6. I report my answers to the research question 
7. and finally I discuss how the theory changed based on my experiment 
-------------
beliau mengulang lagi, mengikuti garis dari atas kebawah, yakni dari alam pikiran ke reality, lalu dari bawah naik ke atas lagi dari reality ke alam pikiran
---------------------------------------------
so I start from a theory 
and I perform this study so I go top-down towards reality 
(then) I test the theory really test in a quantitative way 
and then I discuss if the theory is confirmed? 
in which way  my scope of validity is extended for a certain theory with respect to previously existing studies 

and so basically discussing in the end : means 'comparing with existing work in the field' 
and explaining in which way your experiments are 'advanced their knowledge' in the 'specific field', ok? 

this is just to give you an 'overview of '
'what controlled experiments are?' 
and how are they 'positioned in the process' of "building theories", ok? 
====================================
4. controlled experiments : elements (12:57 - 18:58)
5. controlled experiments : controlled variables (18:58 - 27:55)
durasi 15 menit : berapa kata yang dihasilkan?
====================================
6. Definitions : lebih formal (27:55 - 30:52)
=====================================
10. advantage and disadvantage (48:24 - 54:28)
=====================================
my summary
==================================
first example
objective : which is the better tools for testing?  tools A vs tools B
independent variables = the tool (one factor)
treatments are also straightforward : tool A and B (two treatments)
dependent variable :  I have to detail what I mean by "better"?
better in terms of speed ?
better in terms of bugs found ?
alessio already have 2 dependent variable : "effectiveness" and "efficiency"
efectiveness = NBF/TNB

Now i have to identify the controlled variables : 
what can impact on "effectiveness" and "efficiency" 
language of code : only C code.
numbers of bugs in the code module (harus sama-sama 2 grup)
lengths of the module
complexity of the module
domain of the code (OS, text processing, egov, etc)
-------------
apa yang ingin saya ketahui?
dalam konteks experiment refactoring bagaimana dengan komposisi variable-nya?

dependent = COUPLING (CINT,CDISP), size (NOM,NOC,LOC),harmfulness  (benarkah?), 
controlled =  experience, experimenter, env of computer, source code (ada lagi?) , tingkat pressure, 
variable dikontrol agar tidak membingungkan, sebenarnya faktor apa yang menaikkan kualitas?
bagaimana dengan teknik refactoringnya? 
independent (treatments) = refactoring (refactoring -> coupling and size)

coba bandingkan dengan contoh riset alessio.

------------------------------
apa lagi yang didapat dari course ini?

-----------------------------------
