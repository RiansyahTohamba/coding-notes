3. approach
The study involves analyses of both the implementation structure of the case study software system and change
logs. The analysis of the implementation structure provides
a characterization of the individual classes in the system,
and identifies the design patterns. The change logs provide
the information needed to develop a change-architecture for
the system; they identify individual changes and all classes
that were changed for each reported change.
The analysis method consists of five steps:
1. Collect class-level implementation metrics of the system under study. We measure class size, and the properties of a class’s relationships to the rest of the system.
2. Identify design patterns in the system. We identified only intentional design patterns, design patterns
that developers use in a deliberate purposeful manner.
These patterns should be documented, and they should
have an effect on the number of changes, since adaptability is the primary reason for using patterns — the
indirection inherent in design patterns should reduce
the number of changes to existing classes.
3. Identify the changes in each class, and determine
whether a change is local to a class or involves multiple classes. We use counts of these categories of
changes to generate values of three change-proneness
measures: local change-proneness (LCP), pair change
coupling (PCC), and the sum of pair coupling (SPC).
The measures are defined for a single change report
and then aggregated for all change reports.
4. Identify the change-prone classes. A class is considered to be change-prone if each of the change-prone
measures falls above a threshold. We determine the
thresholds through a simple outlier analysis of the distribution of measured values.
5. Develop a change-architecturediagram for the changeprone classes. When changes are solely due to defects,
this the same as the fault-architecture diagram in von
Mayrhauser et al. [15, 16].
3.1. Class›level Measures
Assorted class-level metrics indicate internal properties
of a class and relationships between classes. Two metrics
are measures of class size:
Total number of attributes (Tatt): includes both instance variables (non-static member data) and class
variables (static member data).
Total number of operations (Toper): includes both
instance methods (non-static member functions) and
class methods (static member functions).
Five metrics indicate properties of a class’s relationship
with other classes, either a property of an inheritance relationship or visibility through the C++ friends construct:
Number of friends methods (Friends).
Number of methods that are overridden (MO).
Depth of inheritance (DOI): indicates a class’s level
in a class hierarchy. A base class — a class with no
superclasses — has a DOI of zero.
Number of direct child classes (DCC): a count of the
number of immediate subclasses.
Number of descendents (Desc): a count of all classes
that are derived from the class either directly or indirectly.
Various tools can produce these measures. We used the Together tool and its metamodel, a product of TogetherSoft
Corp.
3.2. Finding Patterns
We examine program source code, class diagrams generated by Together from code, and documentation to find the
patterns using the following procedure:
1. Search for pattern names in the documentation of the
system.
2. Identify the context of the classes identified in step 1
by analyzing the class diagrams. Once we find the
classes whose documentation specifies something relating to a pattern name/role, we can look at the class
diagrams to identify all the classes required to constitute a pattern. We look for the links and interactions
between classes that implement the pattern.
3. Verify that the candidate pattern is really a pattern instance. We examine the pattern implementation to look
for lower level details.
4. Verify the purpose of the pattern. We examine each
group of classes that represent a pattern candidate to
confirm that the classes and relations have the same
purpose as described by an authoritative pattern reference. We use the Gamma et al. [6] book as the authoritative reference for this study.
This process will only identify patterns that are documented by using well-known pattern names. We will miss
undocumented patterns, and patterns that were used unintentionally. However, to have an effect on ease of adaptation, the developer responsible for making a change must
know about the pattern. These patterns should be documented, and they should have an effect on the number
of changes, since adaptability is a primary reason for using patterns — the indirection inherent in design patterns
should reduce the number of changes to existing classes.
Changes should be limited to adding new subclasses or
other new classes that were not part of the original pattern