crash course philosoph argument 
species of argument
1. deductive
2. inductive 
3. abductive
4. etc
5. etc
------
1. deductive = collection of premise that lead to conclusion
valid conclusion
premise 1 : all humans are mortals
premise 2 : socrates is human
premise 3 : socrates is mortals
----
invalid conclusion
premise 1 : all humans are mortals
premise 2 : socrates is human
premise 3 : socrates was teacher of plato

ga ada statement teacher of plato
mortals of human tidak bisa menjadi bukti bahwa socrates adalah guru nya plato.

(validity != truth) karena (harus baca lagi)
-----
2. inductive = using past experience to make future predictions
jadi kita fokus ke 'what can we do to tackle problem based on the past experience'?
induktif juga disusun dari collection of premises, tapi dia tidak mengenal certainty dalam kesimpulan, yang ada hanya 
'PROBABILITIES' (likely) kesimpulannya akan benar.
gaya reasoning ini sangat useful tapi punya problem.

---------
Kuliah alessio ferrari building theories 
------

okay, 
so today we will we closed our introductory part of the course and 
then we will go to the actual meet with with a different with the different methods for doing research in empirical software engineering okay ?
? 
today we will speak about building theories in software engineering and we will speak about also which are the different strategies for performing empirical studies in software engineering last time we saw data collection methods which is just a part of the old research process okay ?
today, we will see the what surrounds what which are the strategies that are using also those data collection method but first let's start with the moral of a philosophical part let's say of the discourse that is related to how to to a general to a general view or how we build the theories in a in our in our field 
so first of all what is the theory a theory is a term that we already used both in this course and you of course also know 

I know yourself and you use it yourself but what is exactly let's read this leidos in this case a theory is a statement about the existence of some pattern in the entities that belong to a certain code 
so basically the key here is but okay ?
 every time there is a regularity in the world or in a like in my in my area of interest okay ?
 I can build the theory and the theory is about entities entities here is a generic word that can be translated also as observable phenomena and includes both objects or static elements and events 
so dynamic elements and that belong to a certain context 

regularities = pattern
certain context = boundary, scope of applicability of the theory

it is important to consider that there are regularities about entities and they are in a certain context why is important to consider the context because the context is the boundary the scope of applicability of the theory 
for example I can build a theory that is related to the context of all the people in a certain company or I can be the theory that is related to all the C developers of the world 
so the context the boundary to which the theory is referred is different okay ?
 
so remember remember this thing theory is associated to patterns which end two entities and two specific contexts I considering this I can have different levels of sophistication of a theory and it depends on 
how much abstract are these entities considered? 

so how much abstract are the objects and the events that are considered they observable phenomena okay ?

also means 

LEVEL SOPHISTICATION OF THEORY depend How much abstract are the entities considered ?
Abstract adalah sejauh mana ia bisa diukur.

LOW = ada numeric rule nya
MEDIUM = masih ada klasifikasi (klasifikasi 3 requirement) tapi ga ada numeric rulenya
HIGH = (verifikasi teori ini is very complicated)

how far are them from direct measurable observation? 

so how far are them from thing that I can evaluate in a with numbers, okay ?
? 

here I made three three different example that gives you an idea of what is the the different what are the different level of sophistication of a theory 
so we have low level of sophistication 
for example this is the theory ninety percent of FAULT are found in functions that are longer than 1000 line of code 
okay ?
(90% Fault ditemukan pada kode yang punya LOC > 1000 )

here you see that this is a theory because it's a pattern.

it's some form of regularity in the world because you can say that 90% of FAULT is something that happened like in 
for example in the context of a company and or in the context of all the C functions okay ?

here come again the contest but still it is a regularity that that I'm stating a pattern somehow that I want to frame with this theory. 

and in this case it's quite easy to be verified precisely.

it can to verify quite precisely because I'm dealing with frequencies and I'm dealing with real objects okay ?

and the measurement that I take are quite are close to close to the observation 
so the lines of code is something that I can count easily okay ?

and once I have given the definition of a fault or saw fault can be identified quite easily okay ?
 
then I have another level of sophistication the desire 
for example consider this theory requirements. 

defects can be classified into unclarity incompleteness and in correctness first of all here I see that I don't have numbers okay ?

and this is the first issue that makes me think okay ?
 
it's already more abstract than the other one okay ?

here I need first of all some precise definition of the three classes 
so what does the unclarity means what does incompleteness mean what are in correctness me okay ?

and I have to assess that all the existing defects okay ?

all the deficient existing defects in my context always can be linked to one of the classes 

so it can be if I take a random defect it can be classified if one of these three classes are the other is unclear or incomplete or incorrect okay ?
 
and not only this but I have to assess that every person that has to link the defect to one of this class actually classify the defect in the same way or in similar way the verification of this theory is much more complicated okay ?
 with respect to the other case okay ?
 because I need to I need to introduce all these other definitions and context and evaluation that are less accurate less and avoid unavoidable rest less precise okay ?
 and 
then I have I can have even higher level of sophistication 
for example but still speak about the theory and something that can I can assess and evaluate 
for example this case if the team leader is not sub confidence self-confident developers loose trust.

measure quality of a person? self-confident ? trust ?


first of all here, it's not just dealing with something that is referred to an object requirement okay ?
 it's referred to a quality of a person. 
 
so self-confidence, trusts okay ?
what is self confidence? 
how can evaluate it ?
what is trust ? 
I can how can I estimate this okay ?

verification of this concept that are you understand very abstract much.
more abstract than the other one.
 that we were speaking about ?
up to now requires unavoidably implies that verification of this theory is much more difficult okay ?

and especially precise verification of this theory is much more difficult okay ?

in software engineering you find all these different type of feelings okay ?
software engineering you have to consider that you will meet all these different granularities okay ?

and this is also the interesting thing because you deal with different as I told in the first lecture you do with a social aspect 

technical aspect 
human aspect 
emotional aspect 
but also numeric and software related

in software related aspect okay ?
 
so this was 

WHAT A THEORY DOES?
description
explanation
prediction
explanation and prediction
design and action

what a theory is 
what a theory does ?
a theory can do this mainly these five things 
so 

1. it can describe 
2. it can explain 
3. it can predict 
4. it can do explanation and prediction and 
5. it can do ,especially in an engineering, design and action 
so it can also allow to modify the reality okay ?

1. description
for description, for when when a theory describe analyze a problem okay ?
the product is normally this are normally descriptions and conceptualization 
so a theory can be a taxonomy and ontology like the case of the defect types that I that I gave before okay ?
 
so the that one was a descriptive theory okay ?

the fact that the requirements defects can be classified according to those the and classes okay ?
 
theory can also explain 
so can allow to identify the motivation for for something and in this case you have to consider the example of the team leader 
so the the team leader example tells us the motivation : "why people developer tend to lose trust" 
so it can 
it is explained according to the to the degree of self-confidence of the team leader okay ?
 
it can predict 
so I build the model and 
I predict how things are in the reality like 

in the fault example 
==========================
contoh teori : 90% fault ditemukan di FUNGSI yg punya > 1000 LOC , jadi kita bisa memprediksi setiap fungsi yang punya > 1000 LOC.
DESIGN AND ACTION
berjaga-jaga terhadap Fungsi yang punya > 1000 LOC
==========================
so in the example in which I was speaking about the presence of fault in that our "founding functions" that are longer than 1000 line of code  
so this is the model 
if I found a function that is longer than times a thousand level code 
I can predict that there will be some fault. 

explanation and prediction. 

so I find them order 
so I find the mother about the for predicting the fault and I also find the motivation why longer function of functions that are longer that a certain amount of lines are are more faulty okay ?
 or I can do also design an action with the theory designer action means that.

I use the information to transform a reality. 
this is the I don't have the example here 

but if you remember in the first lecture I was giving you an example about testing resources. 

the one about the developers that if they code at night they create more bugs and they are more productive but they are more productive 

so the solution was theory actually I called it at that time the solution theory was to dedicate more more testing resources to the to the code developer that developed at night okay ?

so this is another type of theory 

so is a theory is a solution theory oriented to design an action remember that the theory can do all these type of things and and the example are quite clarifying I guess now we've seen 

what is a theory ?
what a theory does and now we will see 
========================
what are the elements of a theory ?
========================
WHAT?
HOW?
WHY?
WHERE 
WHEN 
FOR-WHOM


what are the elements okay ?
the elements are 
if you want to remember them 
you can you can remember also the typical questions to which they refer 
6 questions
1. what : construct
2. why : propostion = relation of construct
3. where, when,  for whom : scope

saya harus buat construct saya sendiri ?

so first of all what first question is "WHAT" ! 

and let's read here 
what are the entities in terms of which a theory of a description explanation prediction and prescription these are the constructs of the theory 
so the eletric element the basic entities okay ?

that form the theory are called constructs we use this term later on okay ?
 
then there is a question how that as a that is referred to how these constructs are related okay ?

what are the relationship and the second thing that builds a theory are the propositions 
so statements about the interaction between constructs by constructs. 

I will give you example later on we intend basically if you're if you are confident with the entity relation if a relationship diagram all the entities 
so it can be objects but also attributes okay ?

the constructs 
so we will see some example a zero okay ?


so we have concerts prepositions and the preposition can also lead to prediction of course but here just remember concerts and preposition and there is a third question that that is why a certain relationship holds 

so this is what gives theory explanatory power.
we will see this you know in the next slide and in the end.  

I have a several other questions which are 
"where-when and for whom"
that are the scope condition that you didn't identify the circumstances in which the theory is applicable.

so these question is addiction a question are the context 
so construct propositions the answer to the question why motivation for which certain relationship also the explanation okay ?
 and scope condition concepts prediction explanation 
 a scope condition 

we will see example of these elements very soon 

===============
CONSTRUCT
===============


so constructs : what concept has the elements okay ?

here are example to give you a flavor of what is what is what we intend here 

UML based development methods 
(definition of UML) if you don't know what is UML you can check internet, but is the basically a set of diagrams that are oriented to design software for mostly for object oriented design okay ?
and the development method based on UML consists in using this diagram to guide the development of software 
so for creating the the software design and architecture that that allows them to develop from that that is the blueprint for developing the software okay ?
but also 
costs 
communication 
design 
documentation 
testability 
so these are all concept okay ?

all the constructs are concept that are relevant for my research and I relevant form a theory okay ?
-----
proposition 
-----
proposition, how the construct interact 
for example here there is a list of proposition this is a proposal P-4 is a proposition.
for example 
the use of a UML based development method positively effects documentation 
so using this method you have a better documentation this is a proposition because it relates UML development method  with another constructs which is "documentation" okay ?

----------------------
explanation 
----------------------
explanation is the third component and explain : WHY. 

Why this "relationship before" was "hold". 
relationship before = why UML development affect possitively with documentation.

the documentation is more complete more consistent. 

because there is the more traceability between models and 

code it means that I can trace the blueprint 
so the diagrams with the actual codes 
more understandable 
more readable 
so there are justification for the truth of the proposition okay ?
=================================+
SCOPE OF THEORY
=================================+
and the scope condition 
so the other the answer to the other question you have to remember "when where and for whom" 
but the thing that is actually relevant is more thinking also about the actual context 

the thing that characterized the context of my theory 
for example for this theory 
this theory is supposed to be applicable for distributed projects in which the operation our creation modification of embedded safety critical system based on legacy code or new code 

so "quite a wide range" of system but clearly here it refers to embedded systems ok so this theory 
 
for example is applicable for software that goes in a car or in a you know in a ?
in a train or 
in an aircraft.

but is not applicable or at least it was not verified in 
a context of financial systems or like or 
systems that for for the public administration ok?

ok in this example and it is the important thing to consider. 
I am answering all the questions ok 

(answer WHY? IS VERY FREQUENTLY)

but most of the time you leave out 
you leave out too WHY? very frequently 
ok 
so a theory in principle should answer all this question ok ?
but very often the explanatory power 
so the the way a theory is able to "explain why" is very frequently quite WEAK and 
you often need more studies for developing 
1. an answer to HOW and 
2. an answer to WHY, ok ?
so this is for the elements 

======================
END OF ELEMENTS of theories
======================
==============
how theories are formed 
==============
then we want to understand how theories are formed 
there are several strategies okay ?
for performing theories and you will see that our method 
the method that we will study are applying one or more of these strategies okay ?
-----------
INDUCTION
----------- 
so first strategy is the induction okay ?
I take an observation. 
I observe the reality and 
I infer a generalized conclusion from particular instances 

so take an observation of over set of developers 
and I start developing the theory. 
 
so identify  
1. first the constructs 
2. then the proposition 
3. the explanation and 
4. the scope
5. and the context 

from the theory
I can deduce some hypothesis. 
I can define some some possible hypothesis 
that will be derived directly by my proposition okay ?
and 
then I have to test hypothesis 

-----------
DEDUCTION
-----------
so this is the second step that is : deduction 
and deduction means taking the proposition of the theory derive testable hypothesis. 
you will see testable hypothesis in the next lecture like a "large set of example" and 
then you have to verify that actually this hypothesis are true by observing the reality 
so you have to compare the hypothesis against the reality 
when you have built the theory through this 
through this iteration, (ada gambar iteration) okay ?

======================
EXTEND OF THEORIES to the orther field, EXAMPLE : SUCCESS IN EMBEDED SYSTEM , IS IT SUCCES IN PUBLIC ADMINSTRATION TOO?
======================
so you have inducted 
and you have elicited some information 
and you have deduced testable hypothesis for the theory 
then you may want to extend the theory to other field.

for example you've developed the theory for the one that I want that I was showing before for embedded system and you may infer that that theory may be applicable also in the context of public administration system.

---
iterasi teori -> deduce teori ->  hipotesis 
---
then I deduce new hypothesis 
and I test them in the public administration system 

so this is the way the sig cycle works 
so I start normally from induction but very frequently there is already some theory around 
so some information around 
so some some preposition that I need to that 

I need to verify from this I there's reduce I bought this I test them in my environment.
and when I have some solid theories or referred to similar context I can abduct 
so I can use the method of abduction and in take a more creates let's say a more general theory and port it to another context okay ?
I port it to another context and derive new hypothesis and perform a new test and observation okay ?
yeah and derive new testable hypothesis for a theory also for through the second step of deduction 

so remember this 
induction comes from observation to theory 
deduction comes from theory to hypothesize and 
abduction from accounts go from theory to theory okay ?
===========================
Theory evaluation
1. testability
2. empirical support 
3. explanatory power
4. parsimony
5. generality
6. utility
===========================

how do I evaluate the theory ? 
once I have developed my theory how can I evaluate it ?
here are six criteria for evaluating it okay ?

first of all testability 
so a theory is somehow scientific if it is built in such a way that "it can be falsified" okay ?
"it can be tested" you can be tested 
we will see this falsification concept later on here I wanted to leave it I wanted not to focus on it 
because it is more related to the way we test quantitative theory 
but in any case testability is a theory that can be put against reality and we can do some empirical refutation okay ?

----------------
empirical support !
----------------
how many studies are supporting it how much information from empirical studies that are actually supporting my theory 
--------------------------
explanatory power
--------------------------
then I have explanatory power that is to which extent my theory explains WHY okay ?

explain why question 
so if I considered all the possible motivation that may have lead to this to this conclusion 
or I might lose in something 

so in there 
for example in 
the example before in which i have the list of reason WHY "UML makes documentation better" ?
I may have miss some other variables 
that might have influenced my outcome
and so there may be different reasons with respect to the one that I found for explaining my theory okay ?
------------------
parsimony 
------------------
so how much effort did to I make to minimize the number of constructs involved in also proposition 
-------------
generality 
-------------
so how large is the scope of material many context am I am covering with this theory 
----------------
utility
----------------
and utility 
utility is very important for our domain because the knowledge that i acquire through the empirical software engineering research it needs to be useful okay?
it needs to have to a certain extent to some applicability 
so, as it was shown in the first lecture 
the path is always "arriving to a solution theory "
to a theory that is oriented to transform the reality okay ?
this is this is a "peculiarity" of software engineering theories okay ?
to consider how useful can THEY BE? 
it is always not easy to say this theory is useful and this is not 

but it is important to reflect and to make some arguments why it could be useful okay ?
because it is true that science and many things that we developed through research the their utility may not be self-evident okay ?

but in software engineering research you have to argue since it's not fundamental research.

in research related to company to the way people behave to code into something very concrete, 
very very practical, 
(So) utility is very relevant ok? 
===========
FORMULATE THEORIES
menit 24:40
===========
so how do I formulate theories?

this is a step to step guide, of course !
as you may have known from your experiences 
software developers thing never works step by step,of course !
but to somehow communicate them we need to pretend that they are working step by step okay ?
 
so first of all we need to define the construct of the theory 
so which are the building blocks. 
so this can be another construct 
so or existing one. 
so taking from existing theories that I want to take as as a reference or 
================
refinements of theory
================
they can be refinements of a existing one 
so I take constructs from other theories from other from other research from other literature and I refine them okay ?
=====
theory of CLASS DIAGRAMS
====== 
so for example in the case UML development methods
I may want taking that theory 
I may want to consider only one type of diagram : the class diagrams, okay ?

---------
to which extent the class diagrams help in improving documentation?
----------
to which extent the class diagrams 
,for example, help in improving documentation, okay ?

this can be a way of taking a theory and 
trying to build on that by refining the construct 

or i can use novel constructs that are somehow related to the previous one. 

for example 
1. another type of diagram 
2. another type of development style. 

so this is to tell you that every time you build the theory, 
you may take also subconsciously inspiration from some theory that already exists. 

it is good that you make it explicit when you define the theory 
what are the drivers and 
what are the sources from which you are taking your constructs, okay ?

then you define proposition. 
again that can be novel 
they can be modification or 
refinements of the existing ones 

and basically they connect our construct and our (construct) relationship 

then I can provide explanation to justify the theory so a series of assumption and logical justification 
and this is explanation 
they can refer to existing theories and they can come also from other disciplines 
so the possible explanation 
so again an explanation is related to a construct okay ?

there is a motivation that is explain a relationship between construct, okay ?

and this represented, 
here the explanation is the source of this relation is construct of other element okay ?

and finally define the scope of interest okay ? 

the fourth element that are the values of the constructs 
and their combination that the theory is oriented to explain, okay ?

we will see that there is a difference between the scope of interest 
and the scope of validity

but in our here 
we are interested in what "we are oriented to explain with our theory" 

remember that every time yeah you you apply an empirical method you are actually building theory 

so your goal is always to build a theory with a different flavor so 
descriptive, 
explanatory, 
predictive. 
but still your built a theory 

after I built this theory
I need to test it okay ?
otherwise there's no empiricism okay ?

I have to evaluate how valid is this theory 
and this steps are this one 
I have to research 
I have to select a research setting and sample 

by sample here I mean not just actors but activity system 
so all the things 
all the components that I can use in reality 
1. to identify my constructs and 
2. to test my theory okay ?

research setting here it can be like 
for example 
a company or 
can be a laboratory yeah 

we will see in the different in the different examples of research types in research strategies that different settings are possible 
1. more natural or 
2. more contrived so more artificial like a lab is an artificial setting, 
3. a company is a more natural setting 
okay?

then i operationalised theoretical construct into empirical variables 

so I transform these constructs in variable that they can be measured in reality 
so a term like 
testability or 
documentation quality 

(they) needs to be measured,okay ?
and then I translate this into theoretical proposition 
so the propositions that are belong to the theory into hypothesis 

as I was saying before 
so I transform this proposition in hypothesis that I can test 

the hypothesis are expressed in terms of empirical variables and this is typical of qualitative studies okay ?

but the philosophy is very similar also for quantitative study 
so is is something that that you have to consider for any type of theory okay ?

and then I have to test the hypothesis 
so I have to verify that these hypothesis  actually "holds" for my context okay ?

and when we speak about the hypothesis testing is always refer to quantitative statistical tests 

but as I was saying before this process applies to both quantitative a qualitative method 

although the terminology is like 
1. empirical variable and 
2. empirical testable hypothesis and 
3. testing the hypothesis 

(they) are really mostly for quantitative studies and experiments especially okay ?
 
and finally "define scope of validity" okay ?

I have tested I have selected a sample 
and therefore I didn't verify my theory for the whole possible set of samples 
but just for a specific set of cases okay ?

scope of validity is the part of the scope of interest in which the theory has actually been validated okay ?
 
so here is the summary in terms of a graphical summary of "how the theory is built" according to the steps that I gave you before 

so first of all 
1. the constructs 
2. the propositions 
3. explanation and then
4. the scope of interest okay ?

(lalu muncul lingkaran kuning)
then given this 
this is the theory from which I start 
I operationalisedd the variables 
and I transform and identify my hypothesis that are basically the representation of 
the proposition in terms of the concrete variables okay ?

and identify the sample.
you already see that this sample is smaller than the context of the theory, okay?

and then I here I'm still somehow in an abstract space but closer to reality 

the final step is data collection and measurements in which I actually go to the reality and collect this data 

once I have defined the sample 
I can apply the sampling strategy and 
I can identify all my data with the different data collection techniques that I explained you last time 

at this point 
I can having my data 
I can test whether my effort as should (seperti seharusnya. mungkin? wkwk)

so given my data I said hey is this hypothesis true or not ?
I can confirm and reject the hypothesis 
and therefore "support or not support" my theory and I can identify my scope of validity 
so after I am verified in a certain specific context and 
============================================
Scope of validity
===============================================
I have identified the scope abilities 
I can say okay ?
my theory for the specific context 
the scope of validity here 
you have an interesting image that tells you that you to cover the scope of interest of a theory 

you know
you need multiple studies 
they make over different scope of validity ok ?
so here you have a scope of validity 
for study one 
for study two 
study three and all together 

they cover a part of the possible scope of interest of the theory okay ?
============================================
Threat to validity
============================================
This is another important point that you will encounter in every method okay ?

the fact that you've done all this very nice 
very nice process of 
starting from the theory and empirical verification etc doesn't mean that your theory is is accepted or reject okay ?

you need to provide arguments that you needed you didn't do any mistake okay ?

and you need to provide arguments that you didn't do especially 
"invalid operationalization of theoretical constructs and propositions" 

so for example : you need to "justify the fact" that a constructs such as 
"the complexity of the code is represented with line of codes" 
is it's a valid operationalization ? 
or not ?

you need to provide arguments to which extent this operationalization is valid ? 
================
CONTOH DARI inappropriate research design 
================
or inappropriate research design 

so you may have selected 
you may have selected the wrong sample 
you may have made a mistake in the data collection procedures 
in the data analysis procedures 

so you may have made mistakes across the step and you need to demonstrate that you didn't do that 

inaccuracy in data collection and data analysis 

this is related to of course to 
1. an inappropriate research design and 
2. possible misinterpretation of the empirical findings 

so what you found was actually clearly leading with the data and you didn't do any wrong interpretation
===============================================
Threat to validity : 
constructs - 
internal - 
external
===============================================

in general, each research method as his own classification that those 
that I listed before where some intuitions through behind the concept of threat to validity 
so anything that you could have done wrong in this process okay ?

but then in each type of research methods, you use a different classification for because you may have different types of threats different type of mistakes that you have made 

and this is a general classification that is typical for experiments and that but it is useful to remember okay ?

because it gives you the the "flavor" of what are the main concern interest to validity evaluation 

1. construct validity
first of all construct validity that is related to the question that I was explaining before 

"have i operationalised the all constructs correctly ?"

so my constructs are actually represented in a proper way by my variables this is this is the question okay ?

and you have to provide sufficient arguments 

2. internal validity
internal validity : "are there aspects that may have influenced my outcome and I did not consider" 
this is related mostly to your design and data collection method okay ?
and in this case you have to identify which are the possible variables that you didn't control and you didn't consider and and that may have had an impact on your design 
for example if I am evaluating the complexity of a code and I'm using some code samples okay ?

//orang yang menyatakan kodenya kompleks harus belum pernah melihat kode nya
and I want to let the people- actual people - assess the degree of complexity of this code

I have to be sure that these people did not already see the code 
that they are evaluating because otherwise the evaluation of complexity is biased okay ?
programer have seen code then code less complex

if you all know already 
if you've seen already a certain code of course it will be less complex than for another person who didn't see it who didn't see it who never saw it, okay ?

these are typical internal threats 
so other variable that you did not consider in your experiment or in your in your study and that have an influence all on your outcome 

3. external validity
external validity that is related to which extent are my findings generalizable?
so this is related to how much my "scope of validity" ?
basically covers my scope of interest or how many contexts can I cover okay ?
  
which for example "which type of languages are considered?" 

here in this example, complexity yes! 
but may it be different from 
if I am covering C code and Python code 
so if my experiment is made on both C code and Python code 

then I have quite a good external validity.

but if it's just made of one type of code is more limited okay ?

this is these are three that are quite clear and I think quite intuitive as type of threats, okay ?
---------------------
example before = deductive step-by-step 
---------------------
this we saw in the example before 
(let's let's make a step back in the example before) 

we saw that we were passing from theory to reality okay ?

this was the typical process for a deductive approach 

if you remember the early slides 
1. because I'm starting from theory 
2. I assume that I built the theory somehow and I go towards reality 

----
WHAT IF NOT HAVE THEORY YET?
----
but the reality could be also that I don't have a theory yet !

so I need to start from observation.
I need to start from the reality 
and in this case I use the so-called "inductive" approach. 
------------
inductive : step-by-step 

so the one that I showed before is the typical say 
if you want the positivist approach for constructing theory 
so the deductive one 
you start 
from some constructs 
from the researcher 
from the propositions and 
you create hypothesis and 
your then you test 

but in our diagram which also the inductive process okay ?

we will not cover here abductive processes 
but inductive is important because it's typical of the so called constructivist approaches, that are one the ones using used in qualitative studies. 

so in this case I start from simple definition and data collection 
for example 
1. I collect some interviews in a company and 
2. then from these interviews I identify which are the constructs okay ? 
3. then the basic thing is that I start from my simple definition and 
4. then afterwards I identify variables and propositions okay ?
5. and from this I can build my theory, 
so the theory comes afterwards I am eliciting the theory from the data okay ?

============
KOMBINASI INDUCTIVE AND DEDUCTIVE
============
I can combine the two approaches, of course
because in a case in which I don't know much about a certain reality like the reality of a specific company 
and I have to start with the collection of interviews before knowing what is actually relevant.

what time for example in the case that in the example before 

what are the elements that may affect the (dia lagi nyari contoh) or in which way 
"the UML language can affect the development?" 

to understand the ways : 
I have to ask to people ! to understand that, for example 
it affects documentation ? 
it affects understability ?  or other aspects ? okay ?

then I have built the theory in an inductive way 
but afterwards I have to test the theory 
and I can apply a deductive approach okay ?

I can take my preposition. 
I can operationalised into more refined variables 
for example into more measurable variables 
so give a way of evaluating the quality of documentation.

then I do again around of sample definition and data collection 
and in this case I do my hypothesis testing 
so I deduce my hypothesis 
I test hypothesis and 
then I can refute OR confirm the theory 

so inductive process and deductive process are combined 
and are made of different steps of the theory constructions 
and they are used at different stages okay ?

in one case I use the inductive processes if I don't know anything about a context and 
I use a deductive process if I already have some theory or I can build some theory from the information that I have already collected 
(
theory nya : refactoring -> improve quality
observation : extract method kecil-kecil terjadi penurunan jumlah baris kode, tapi disatu sisi programmer lain bingung karena banyak fungsi kecil
)
this remembers us when we were speaking about the different research questions okay ?
===================
RESEARCH QUESTION sebagai pemandu riset secara impilisit
===================
because theories are built and are guided in a hidden way here in this presentation also by research questions okay ?

when we were thinking about the research question we were thinking about 
exploratory, 
explanatory 
so different type of questions depending on how much information do I have about a certain context ?

and this is strictly related to this diagram 
(diagram step-by-step guide : inductive to deductive)

first of all 
I will have exploratory research questions 
(ada yg sy hapus : and I always tend to induct??)
dia ingin ngomong bahwa diagram berikut tentang inductive approach
I will tend to use a research approach that is more inductive. 
once I have the theory 
I will go towards more explanatory or more predictive research questions 
and I will tend to use deductive approach okay ?
==================================
Generating a theory - inductive to deductive an example
==================================
-now I'll give you an example 
in here I was hiding the example between the lines 
but this is the example 
basically this is taken from the paper that I used as a reference here for building this lecture 

====================================================
step 1. defining the constructs
step 2. defining the propositions
step 3. Provide explanation
step 4. scope of interest of the theory
====================================================

and I invite you also to read the paper because, of course, it contains much more information that I wanted that the one that 
I could give here 

here the example is concern with a field study 
Field study in a company basically 
"to investigate benefits and challenges of the use of UML in a large distributed development project"

so you have large and distributed means that you have 
"different people working in different areas "

so for example 
1. one in Milan and one in Florence or 
2. even one in India, one in Italy okay ?


so different teams belonging to the organization but located in different geographical locations and you want to understand whether this UML works "fine or not ?" 
so what are the benefits and the challenges ?

and the project was concerned the project that they were developing is concerned with 
"a safety critical process control system"
okay ?
this is needed just to identify the scope later on 
in this case you are four sites in three countries 

so not just Milan Florence but other country for example in Germany and in France 
230 , 100 nya using UML
and you have many people two hundred and thirty and a hundred of them are using actually a UML, ok ?
 
so they could collect information from 
1. individual interviews 
2. questionnaires and 
3. project documents 

so the data collection was using different strategies okay ?
both interviews questionnaires or surveys and also document analysis okay ? also taking the documentation. 
 
so you see already the data collection strategies that I explained you before they come handy.
you have here some "people intensive" data collection methods like 'interviews' and 

some system intensive 
all objects intensive like project documents okay ?

first I define the constructs 
and to do that I perform a series of interviews okay ?

and from this interview that I performed with the people in the company identify which are the most significant concepts okay ?
and how do I do that? 

you learned this when we do qualitative study and basically it's a strategy called open coding that means labeling the concepts in the text 
finding fragments in the text that represent my concepts okay ?
 
so if people, for example, like in a trivial case they mention that documentation many time 
documentation may be relevant and 
so this is one of my construct, okay ?
and I can find it during the interview okay ?
they are speaking about documentation and 
so this is a relevant constructs. 

these are the examples the same way that I gave you before 
so code "UML based development methods" is a constructs because we are speaking about that 1. COST 
2. communication 
3. design 
4. documentation 

so these are all the building blocks that I want to consider in my theory and that are elicited. they are identified in the interview transcripts okay ?

in their interview with the people 
people are speaking about this thing 
so they are elements that I need to consider my theory 

---------------------
propositions 
---------------------
propositions still from these interviews 
I can identify not just the elements but also the relationship 
again the paradigm of entity relationship diagrams is still relevant here. 
like you have identified the entities 

and now still in the interviews you identify the relationship and these are translated into propositions okay ?

now I have a series of relationships 
for example "UML decrease in the effects cost"  so "increases costs"

and I want to understand whether this proposition that I gathered from the interview are actually "true?" for all the people 
because the interview
some people may mention this aspect 
and some people may not 
 
so I need to test this (proposition) with questioners, to make them more solid okay ?
then I provide explanation. 

I see that the in interview there is some explanation that explained the reason behind the proposition okay ?

But in some cases 
for example I may have no explanation 
so I perform further interview that are more focused on finding explanation for certain statements of the people 
and that allow me to list the explanation 
for example Here 

documentation is 
1. more complete 
2. more consistent 
3. more readable :because it makes it easier to find specific information to a common format 
4. more understandable for non-technical people 
so if I have the diagram. it is more understandable, because technical people find it easier to understand the diagram that the technical written that the technical text okay?

it may be viewed from different expressed paired different perspective because I have different types of diagrams 

so these are all motivations that I can find in the interviews 

so we are at the step 3. 
now step 4 : identifying the scope of interest of the theory.

so with this theory in principle 
what do I want to cover okay ?
I started from a specific company's, large company, (what do?) 
but my aspiration is that I want this theory to hold in a large broad scope (ok?), that is the scope of interest of my theory 

the scope of interest in general in software engineering can be defined according to these four elements (4 element = technology,actors,software system, activity
)

1. one is the technologies that I consider, it considering and it is UML 
2. in this case the actor, the actors that are involved and here are designers in distributed team, so this characterized my actors. 
3. software system, here the type of software system is embedded software, large-sized embedded software  
4. and activity, activities is in this case create a modify UML diagram, so if the editing of I could also have called activity tasks 
for example tasks that : I'm doing is designing (okay ?) design, software design

----------------------------------
TESTING THEORIES
----------------------------------
finally I need to test the theory 
so I've done 
all this interview 
all this step 
in inductive way 

because I was Following an inductive process 
(interviews to eliciting)
starting from the data of the interviews 
and eliciting proposition and theory 
but then now I have the theory 
but this theory is not fully robust 
(let's say) because I need to verified it !

(I need to prove it ? eh, it's not proved  beliau salah menyebut need to prove it padahal harusnya verified)

and in this case I apply deductive step.

step 5 : deductive

Deductive step means that I take the "single proposition" or a "subset" because probably to verify with quantitative methods a deductive approach. 

I cannot consider all the proposition all together but better to focus on one at a time. 

and translate into hypothesis 
and do some study ok?
 
for example I can use. 
I can take the proposition 
"use of UML methods increases costs" 

and I can decide to assess (beliau bingung lagi) with this preposition that can be translated into hypothesis, it's true ? 

by doing, by using different methods.

for example I can do a field study (sorry for the typo here, tertulis di slide filed study)  
1. field study 
2. an experiment or 
3. a survey, 

for example if I do a field study I can identify companies that want to introduce UML and establish a clear way to evaluate the cost. 

so I say ok man-hour is my way of evaluate cost.

I consider another comparable company that's not using UML.

======================================
FIELD STUDY EXAMPLE : COMPANY USING UML VS COMPANY NOT USING UML affect cost (in man-hour) ? 
======================================
and I check the resulting cost of the two companies. 

so here I am studying in the real world. 
someone that is introducing UML and 
someone that is not.
and I compare the cost 

if the one that is introduced in UML is having higher costs then I can say that it is true (it is at least) it is not false that 
"the use of UML methods increases costs", okay ?

=====================
EXPERIMENT EXAMPLE
====================
then (bingung lagi "I can or") 
I can do choose to do "an experiment "
for example : an experiment still related to the same proposition.
(proposition nya : (UML) DIAGRAM -> COST)

in this case I take two group of subjects 
I give them a requirements document written in natural language,so, that explain basically what the system should do 
--------------------
GROUP 1 VS GROUP 2
--------------------
I ask group one 
1. to take the document and 
2. write down the code 

and group two 
1. to write the diagram and 
2. then implement the code and 

then I can evaluate and compare the cost okay ?

in this case I'm performing an experiment very narrow 
take group of subjects in a lab environment with a very well-defined requirement document.

I have constrained in terms of time 
it does not consider the whole context of a company.

but still it's another way to evaluate whether this proposition is biased to assess my hypothesis ? 

====================
SURVEY EXAMPLE
====================
or I can do a survey a question 
so with the same statement (UML affect COST)
I can contact multiple companies that have introduced UML.

and I can ask them the same questions 

asks them to said their agreement with my proposition 
in this case 
I can reach more people 
and I can have an answer to more than one to two more than one of these questions.

but of course I cannot go too deep into the reasons,
 
for example why someone is choosing a certain answer or not? 

we will see that 
so this this survey 
and we will see all this type of study in our class 

========================================
step 5 : testing the theory
========================================
so based on this
let's study then identify the scope of validity that is larger for survey 

and I referred narrower for FIELD study 
============
SURVEY > FIELD STUDY in the case People reachment
================
as I was saying 
if I am using a survey 
I am reaching many more people than if I do FIELD study 

so FIELD study is proving somehow 
is verifying the hypothesis 
testing the hypothesis in a more restricted context okay ?

but if I do a survey
I am verifying and testing my hypothesis in a much broader much larger context okay ?
 
==============
GENERATING THEORIES : EXAMPLE
==============
then still, in this example as I said before 
these different ways of evaluating the theory.
in this case I did assume that I didn't test ! 

I didn't do the theory testing. 
so I stopped at with the inductive stage.

=====================
Theory evaluation
1. testability
2. empirical support 
3. explanatory power
4. parsimony
5. generality
6. useful
=====================
------------------------------
1. testability
------------------------------
so the testability is in this case (UML affect COST ?) "is average"
it is not so high because it is true 
that constructs are well-defined and the proposition are clear 
BUT....on the other hand 
these definitions are NOT NUMERICAL ! 
and the data collection was qualitative (interview and survey)

so I've done some open coding 
so I used strategies that are somewhat subjective 
so testability is limited and I could have different results okay ? 
(jika replikasi dilakukan maka hasilnya bisa saja berbeda)
------------------------------
2. empirical support
------------------------------
empirical support seems to be good because 
for example I find other studies that seem to support my proposition 
------------------------------
3. explanatory power
------------------------------
explanatory power is also limited because motivations are derived from the interviews.

so the the reasons why have not been actually I didn't to consider all the possible variables that may explain WHY okay ?
------------------------------
4. parsimony
------------------------------
parsimony yeah I can consider, I can give arguments that the number of constructs is limited.
------------------------------
5. generality
------------------------------
the generality is a bit limited because my scope is related only to a field study in a specific company okay ?
------------------------------
6. useful
------------------------------
but the utility is very high because you can help decision making 
so if I am company, I know that this very large company has used UML 
and it has affected the cost (ughh!)
but it has improved the quality of documentation (hore!)

I can know what to do ! 

if I have money to invest 
and I know that in the long term using this language pays off 
and this is the written in a paper from a study of a large sized company that is comparable to mine this is extremely useful, okay ?

I don't have to take (high risk).
I can take the risk of introducing UML.

so this theory maybe not so much supported. 
not so much general but still very useful okay ?

and these are all arguments that 
when you develop a theory 
when you do an empirical study 
like the one exemplified are all logical arguments that have be to be checked by peers.


so you write these arguments that these are just words but the (so called) reviewers of your research will we check whether these arguments are sound okay ?

so the there is a research community (a set of other people) that will read your arguments to support your theory and and will be allowed to evaluate your work okay ?

Peer-review akan dilakukan oleh reviewer apakah argument kita punya sound? atau unsound? 

6 kriteria tersebut akan digunakan saat melakukan evaluasi teori yang kita tawarkan.
